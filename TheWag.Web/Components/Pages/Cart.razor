@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using TheWag.Models;
@using TheWag.Data;

@inject ProtectedSessionStorage ProtectedSessionStore

@page "/cart"
@attribute [StreamRendering(true)]
@attribute [OutputCache(Duration = 5)]


<PageTitle>Sopping cart</PageTitle>

<h3>Shopping Cart</h3>
<div class="container-fluid">

    @if (cart == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <p>Order for @cart?.Customer.Email</p>
        <table class="table">
            <thead>
                <tr>
                    <th>Description</th>
                    <th>Qty</th>
                    <th>Price</th>
                    <th>Sub Total</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in cart.Items)
                {
                    <tr>
                        <td>
                            <img src="@item.Product.URL" class="card-img-top force-fit-thumbnail" alt="@item.Product.Description">
                            <span style="display:inline-block">@item.Product.Description</span>
                        </td>
                        <td>
                            <img src="images/delete.png" class="icon" @onclick="(() => RemoveItem(item.Product.Id))" /> 
                            @item.Quantity
                            <img src="images/plus.png" class="icon" @onclick="(() => AddItem(item.Product.Id))" />
                        </td>
                        <td>$@item.Product.Price</td>
                        <td>$@GetSubTotal(item.Quantity, item.Product.Price)</td>
                    </tr>
                }
                <tr>
                    <td>Total</td>
                    <td></td>
                    <td></td>
                    <td>$@total</td>
                </tr>
            </tbody>
        </table>
    }
</div>
@code {
    private TheWag.Models.Cart cart = GetEmptyCart();
    private decimal total = 0;

    protected override async Task OnInitializedAsync()
    {
        //see if a cart exists in session
        var result = await ProtectedSessionStore.GetAsync<TheWag.Models.Cart>("cart");
        cart = result.Success ? result.Value : GetEmptyCart();
        UpdateTotal();

    }

    private decimal GetSubTotal(int qty, decimal price)
    {
        var subtotal = qty * price;
        return subtotal;
    }

    private void UpdateTotal()
    {
        total = 0;
        foreach(var item in cart.Items){
            total += item.Quantity * item.Product.Price;
        }
       
    }

    private async Task AddItem(int id){
        var item = cart.Items.FirstOrDefault(x => x.Product.Id == id).Quantity++;

        await ProtectedSessionStore.SetAsync("cart", cart);
        UpdateTotal();
    }

    private async Task RemoveItem(int id)
    {
        var item = cart.Items.FirstOrDefault(x => x.Product.Id == id);
        if (item.Quantity <= 1)
        {
            cart.Items.Remove(item);
        }
        else
        {
            item.Quantity--;
        }
        await ProtectedSessionStore.SetAsync("cart", cart);
        UpdateTotal();
    }

    private static TheWag.Models.Cart GetEmptyCart()
	{
        return new TheWag.Models.Cart()
			{
				Customer = new Customer() { Email = "email" },
				Items = new List<CartItem>() { }
			};
	}
	
}

@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using TheWag.Models;
@using Azure.Storage.Blobs;

@inject ProtectedSessionStorage ProtectedSessionStore
@inject WagDBApiClient WagDBApi
@inject BlobServiceClient blobClient;

@page "/catalog"
@attribute [StreamRendering(true)]
@attribute [OutputCache(Duration = 5)]


<PageTitle>Catalog</PageTitle>

<h3>Catalog</h3>

@if (vmProducts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="container">
        <div class="row row-cols-auto">
            @foreach (var vmProduct in vmProducts)
            {

                <div class="col">
                    <div class="card container-sm h-100">
                        <img src="@vmProduct.URL" class="card-img-top force-fit" alt="@vmProduct.Product.Description">
                        <div class="card-body d-flex flex-column">
                            <h5 class="card-title, text-wrap">@vmProduct.Product.Description</h5>
                            <p class="card-text">Price: @vmProduct.Product.PriceCurrency)</p>
                            <div class="mt-auto">
                                <button type="button" @onclick="(() => AddToCart(vmProduct.Product.Id))" class="btn btn-primary position-relative ">
                                    @vmProduct.addBtnText
                                    <span class="@vmProduct.hideBadge position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger">
                                        @vmProduct.Quantity In cart
                                        <span class="visually-hidden">Already in cart</span>
                                    </span>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
}

@code {
    private IList<vmProduct>? vmProducts = new List<vmProduct>();
    private string blobContainer = "dogpictures";

    protected override async Task OnInitializedAsync()
    {
        //see if a cart exists in session
        var result = await ProtectedSessionStore.GetAsync<TheWag.Models.Cart>("cart");
        var cart = result.Success ? result.Value : null;
        if (cart == null)
        {
            //no cart found, create one
            cart = new TheWag.Models.Cart()
            {
                Customer = new Customer() { Email = "email" },
                Items = new List<CartItem>() {}
            };
        }
        //persist the cart to session
        await ProtectedSessionStore.SetAsync("cart", cart);

        //get all products
        var products = await WagDBApi.GetAllProductsAsync();
        var bcc = blobClient.GetBlobContainerClient(blobContainer);

        foreach (var product in products)
        {
            var qty = cart.Items.FirstOrDefault(x => x.Product.Id == product.Id)?.Quantity ?? 0;

            //if the pic doesn't exist in storage, dont load
            if (bcc.GetBlobClient(product.URL.Trim()).Exists())
            {
                vmProducts.Add(new vmProduct()
                    {
                        //check to see if the pic exits
                        Product = product,
                        URL = $"{blobClient.Uri.ToString().TrimEnd('/')}/{blobContainer}/{product.URL}",
                        Quantity = qty,
                        addBtnText = qty > 0 ? "Add another" : "Add to cart",
                        hideBadge = qty > 0 ? "" : "visually-hidden"
                    });
            }
    }

        StateHasChanged();

    }


    private async Task AddToCart(int? id)
    {
        //update the vm
        var vm = vmProducts?.FirstOrDefault(x => x.Product.Id == id);
        vm.Quantity ++;
        vm.hideBadge = "";
        vm.addBtnText = "Add another";


        //update the cart
        var result = await ProtectedSessionStore.GetAsync<TheWag.Models.Cart>("cart");
        var cart = result.Success ? result.Value : null;
        var cartItem = cart?.Items.FirstOrDefault(x => x.Product.Id == id);
        if(cartItem == null){
            cart.Items.Add(new CartItem
                {
                    Product = vm.Product,
                    Quantity = 1
                });
        }
        else{
            cartItem.Quantity++;
        }

        await ProtectedSessionStore.SetAsync("cart", cart);
    }

    public class vmProduct
    {
        public required ProductDTO Product { get; set; }
        public required string URL { get; set; }
        public int Quantity { get; set; } = 0;
        public required string addBtnText { get; set; }
        public string hideBadge { get; set; } = "";

    }
}

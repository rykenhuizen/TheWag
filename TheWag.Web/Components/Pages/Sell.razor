@using TheWag.Models;
@using Util.Azure.ComputerVision;
@using Azure.Storage.Blobs;
@using TheWag.Data;


@inject ComputerVisionClient visionClient; 
@inject BlobServiceClient blobClient;
@inject WagDBApiClient WagDBApi



@page "/sell"

<h3>Sell you dog pictures!</h3>

@if (vm != null)
{
	<div>

		<h3>Upload complete.</h3>
		<p>Description: @vm.Description</p>
		<p>Tags: @string.Join(",", vm.Tags.Select(x => x))</p>
		<p>
			Is this a pick of a dog: 
			@if(vm.IsDog){
				<span> this is a dog!</span>
			} else{
				<span> does not seem to be a picture of a dog</span>
			}
		</p>
		<img src="@vm.URL" />
	</div>
}else
{
	<div>
		<InputFile OnChange="OnInputFileChange" single />
	</div>
}

@code {

	private vmSellUpload vm;
	private static readonly HashSet<string> _imageExtension = new HashSet<string>([".jpg", ".jpeg", ".png", ".gif", ".webp"], StringComparer.OrdinalIgnoreCase);

	protected override async Task OnInitializedAsync()
	{

		var r = await WagDBApi.GetProductsAsync(null);

	}

	private async void OnInputFileChange(InputFileChangeEventArgs e)
	{
		var file = e.File;
		if (file != null)
		{
			//TODO: I think there is a better solution than this tempVm
			var tempVm = new vmSellUpload();

			//get a memory stream of the uploaded img
			MemoryStream ms = new MemoryStream();
			await e.File.OpenReadStream().CopyToAsync(ms);
			var bd = new BinaryData(ms.ToArray());

			//TODO: compress and crop image (try using Magick.NET)
			//TODO: check for duplicate pic

			//get image analysis from computer vision service
			try
			{
				var imageAnalysis = visionClient.GetImageAnalysis(bd);
				tempVm.Description = imageAnalysis.Description;
				tempVm.Tags = imageAnalysis.Tags;
				tempVm.IsDog = imageAnalysis.Tags.Contains("dog");
			}
			catch (Exception ex)
			{
				Console.WriteLine(ex.ToString());
				tempVm.Description = "Error analyzing image" + ex.ToString();
			}


			//save the image to blob storage
			//TODO: do this first and take advantage of async
			try{

				var blobContainer = tempVm.IsDog == true ? "dogpictures" : "invalidpictures";
				var bcc = blobClient.GetBlobContainerClient(blobContainer);
				bcc.CreateIfNotExists();
				bcc.SetAccessPolicy(Azure.Storage.Blobs.Models.PublicAccessType.BlobContainer);

				var fileName = Guid.NewGuid().ToString() + e.File.Name;
				bcc.UploadBlob(fileName, bd);
				bcc.SetAccessPolicy(Azure.Storage.Blobs.Models.PublicAccessType.BlobContainer);

				tempVm.URL = $"{blobClient.Uri.ToString().TrimEnd('/')}/{blobContainer}/{fileName}";
			}
			catch (Exception ex)
			{
				Console.WriteLine(ex.ToString());
				tempVm.Description += " Error uploading image: " + ex.ToString();
			}
			vm = tempVm;		
			StateHasChanged();

			//save to db (call api)
				

			// dbContext.Add<TheWag.Data.EFModels.Product>(new TheWag.Data.EFModels.Product
			// 	{
			// 		Description = tempVm.Description,
			// 		Price = 20,
			// 		Stock = 1,
			// 		URL = tempVm.URL,
			// 		Tags = tempVm.Tags.Select(x => new Product_Tag(){Tag = x}).ToList(),	
			// 	});
			// dbContext.SaveChanges();

			// var p = dbContext.Find<TheWag.Data.EFModels.Product>(1);
		}
	}

	public class vmSellUpload
	{

		public string Description { get; set; } = "No image uploaded";
		public IList<string> Tags { get; set; } = new List<string>();
		public bool IsDog { get; set; } = false;
		public string URL { get; set; } = "";
	}

}
